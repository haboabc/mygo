========================================================================================================
安装go

源码安装./configure make make install

设置GOROOT, GOPATH, PATH, 分开填写方便管理

goroot, path要在/etc/profile里填写
GOROOT=/usr/local/go(一般在这里) (官方包路径)
export GOROOT

PATH=$PATH:$GOROOT/bin
export PATH

gopath要在~/.bashrc里面设置, 然后source ~/.bashrc
GOPATH=$HOME(工作目录路径, 因为没有，所以先随便填一个), 要经常换防止编译污染
export GOPATH

========================================================================================================
编译方法
 将工程路径(根目录)添加到$GOPATH

 go builid xx  其中xx是(包含main()函数的xx.go文件的)目录名字
 整个编译过程只会在当前一个目录生成一个可执行文件, 一般在bin目录下编译

 或者用 (推荐使用)
 go install xx
 编译过程会自动在src同级目录下生成bin目录， pkg目录
 1. 自动将生成的可执行文件放在bin目录下
 2. 自动将生成的库文件放在pkg目录下
 3. 无论在哪执行go install xx, 结果都一样(只要设置了$GOPATH)

天生支持gdb
gdb ./calc
break 设置断点
r run
c continue
p print


========================================================================================================
go 常用命令

go build / go install包名	编译
go doc 包名  				生成包的文档,需要重定向到文件
go fmt 包名					格式化代码
go get url					从指定网址下载(谷歌， github...)
go test 包名				test库包
go version
go vet 包名/go tool vet包名 检查包的错误

======================================================================================================

测试库的方法
	在编写每个库文件的同时，编写相应的xx_test.go文件

	运行 go test XX　　其中XX　是库文件所在包的包名

=======================================================================================================
vim 添加go 插件

TODO

======================================================================================================

命令行参数, os包， flag包, strings包, strconv包

os.Args 变量是一个切片，用于保存命令行参数

v := strings.Join(os.Args[:], " ") 用" "空格连接每个命令行参数

value, ok := strconv.Atoi(os.Args[1]), atoi转换

flag.Parse() 解析命令行
先定义解析的结果变量以及规则
var (
	infile *string = flag.String("i", "infile", "File contains input data")
	outfile *string = filg.String("o", "outfile", "File to be written")
)
flag.Parse() 会将 -i 选项的参数存到 infile变量里， 默认为"infile" 

	./test -i 123 -o 234
	flag.Parse() 得到的结果为
	*infile = "123"
	*outfile = "234"

	./test -i 123
	flag.Parse() 得到的结果为
	*infile = "123"
	*outfile = "outfilr", 用默认的值
































========================================================================================================

第二章 顺序编程

1. 变量 常用的变量定义
	var v1 int			int 型
	var v2 string		字符串
	var v3 [10]int		10元素数组
	var v4 []int		切片
	var v5 struct{		结构(类)
		f int
	}
	var v6 *int			指针 (先接触的是类型, 先接触*为指针， 先接触[]为切片)
	var v7 map[key]val  map[string]int
	var v8 func(a int) int  匿名函数变量
	var v9 chan int    channel类型

	v.(type)可以查看变量的类型

3元素类型: map[string]int   func(a int) (ret int)

支持
	var (
		v1 int
		v2 string
	)
来避免重复些var

初始化
	var v1 int = 10  指定类型

	以下两种推导类型的赋值:
	var v2 = 10      自动推导类型
	v3 := 10		只能在函数内部用的自动推导类型

赋值
	var v int
	v  = 10

支持多变量赋值
	i, j = j, i

支持匿名变量 _ 接受不关心的变量
	
	ret, _ = strconv.Atoi("1234")
	_ 接受赋值，但自动丢弃该值


常量

字面常量例如－12属于能存下它的任意类型如int, float32...

常量定义(常量变量可以无类型，Zero 与0.0 是一个东西， 都是字面常量)
	const Pi float64 = 3.1415926 有类型常量
	const Zero = 0.0   无类型常量 属于能包含它的任意类型
	const 不自动推导而是形成无类型常量, 但字符串常量除外

支持const ()

	const (
		size int64 = 1024
		eof  = -1
	)

支持多重赋值
	const u, v = 1, 2

支持常量表达式
	const v = 1 << 3


go预定义常量 true, false, iota
const 出现时iota 变0，iota每次出现都看成iota++

const (
	c0 = iota   // 0
	c1 = iota   // 1
)

const 特殊简写
	如果const的赋值语句是完全一样的，则可以省略后一个＝和＝右边的
const (
	c0 = iota
	c1
	c2
)

const 实现枚举
const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
	numberofdays
)
值得注意的是大写字母开头的变量是包外可见的，小写字母开头的numberofdays是包外不可见的



常用类型

bool: true, false 
不同类型不能相互赋值, 其中bool类型不支持类型转换

var v1 bool
v1 = 1 //错, 1 是字面常量但不再bool类型的范围里
v1 = bool(1) //错, 其他类型可以

int
	int 和 int32是两种不同的类型
	一般整型常数会自动推导成int 类型 常用于:= 定义并初始化变量时
	var v1 int32
	v2 := 64 //v2是int 类型
	v1 = int32(v2) //对
	如果精度丢失和溢出都不会发生则可以强转

float32/float64

	比较浮点数值大小，不能用==
	用math.Fdim() 函数


复数类型 complex64 表示实部，虚部都32位
	先不考虑
	
 	value2 := 3.2 + 12i
	real(value2), imag(value2)可访问实部， 虚部


字符串常量 string

	var v1 string = "hello, world" , 用string 修饰的变量是常量
	用len()可以获得字符串，数组，切片的成员个数

	len(v1) 没哟尾0
	
	字符串遍历, unicode 字符遍历,英文占 1个字节，中文占3个字节
	但他们都是一个rune 字符

	用range 遍历string， array, slice
	for k,v := range(v1) {
		//k 是key
		//v 是value
	}

	如果以单字节的方式遍历，字符串含中文是会出现问题
	
	for i:= 0; i > len(str); i++ {
		//并不是每个字符都占一个字节
	}
	
数组
	[32]byte					长度为32， 元素为byte类型
	[32]struct{x, y int32}		长度为32， 元素为struct类型	
	[32]*float64				长度是32， 元素为指针
	[3][5]int					长度是3，  元素为 [5]int数组
	[2][2][2]float64			长度是2，  元素是 [2][2]float64数组

	数组是值类型，在函数传参中会传一份拷贝，不传递指针(传递指针的为slice interface chan map 4种)


	 数组的等号右边写法 类型+{}
	 [5]int{1, 2, 3, 4, 5} 右边也要带上类型

切片, 不定长数组
	 包含:
		一个指向自己的指针
		元素个数
		容量

创建切片方法:
	1。 基于数组，用数组的元素创建切片
		var array [10]int = [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

		var slice []int = array[:5]

		[:]为左开右闭的原则, [:5]及 下标为0, 1, 2, 3, 4的元素 
		左开右闭的好处是前5个元素写成[:5]就可以， 因为下标是从0开始的，不用写成[:4]
	
	2。 直接创建， 用make(类型， 个数)

		slice := make([]int, 5) 默认初始元素为0

		slice := make([]int, 5, 10) 创建元素个数为5， 容量为10， 的int切片
		len(slice) 查看切片中元素的个数
		cap(slice) 查看切片分配的空间(可变)

		或者用数组的方法，它本身是个数组
		slice := []int{1, 2, 3, 4, 5}
	
	3。 给予切片创建切片, 于基于数组方法一样
		var slice1 []int = []int{1, 2, 3, 4}
		var slice2 []int = slice1[:3]
		有趣的是如果slice1的cap大于6， slice1[:6]也是可以的，超过的部分自动补0, 但不能超过slice1的cap


slice 遍历同数组，可以用len()， 可以用range()

向slice 追加元素 append(slice, 元素1， 元素2...)函数
	append()函数的第二个参数可以是slice 但必须写成slice...的形式
	append 的元素过多时，slice 会自动括容

	slice = append(slice, 1, 2, 3)
或者
	var slice2 []int = []int{1, 2, 3}	
	slice = append(slice , slice2...)
	 


切片拷贝copy() 按两者之间较少的个数拷贝， 方向同strcpy 
	slice1 := []int{1, 2, 3, 4, 5}
	xlice2 := []int{5, 4, 3}

	copy(slice2, slice1) //1复制3个元素到2中
	copy(slice1, slice2)
=================================================================================
涉及切片的小函数
	len() range() make() cap() copy() append()
=================================================================================

map:键值对的集合
	map[string] int
	声明一个键为sting了类型，值为int类型的map类型　的变量
	var mymap map[string]int 

创建map:make() 或者直接创建

	mymap := make(map[string]int) // make()创建map是只用类型即可, 也可以指定cap
	mymap := make(map[string]int, 100) //100的初始cap, 无法

	直接创建 (不推荐)
	var mymap map[string] int = map[string]int{
								"1":  1,
								"2":  2,
	}
	 键值对用key:val的形式写， 并用，隔开

	往map里添加键值对:
		mymap["1"] = 1
		mymap["2"] = 2
	
	大概可以理解成这样(打印出来是这样) map["1":1 "2":2] , 但他们是无续的

	根据键查找值, 键是唯一的
	intval, ok := mymap["1"] //mymap["1"]既可以放在等号左边又能放在等号右边
	ok 是一个bool 值， 成功找到返回true, 否则返回false

遍历map: range

	k, v := range(mymap)

删除元素:delete(mymap, key)

		delete(mymap, "1") //删除key＝"1"的元素
====================================================================================
涉及map的小函数
	make() range() delete()
====================================================================================
	
流程控制 if for switch goto break continue fallthrough

if :
	在有返回值的函数中，不允许将最终的return 卸载if..else 里, 但是if..else..外有return 时
	if..else 里是可以有return 的

switch i: i 可以是任何类型的变量
		  不用break, 默认只在本case里执行, 需要向下执行一个case时用fallthrough
		  i 甚至可以没有
			switch  {
			case condition1:
				...
			case condition2:
				...
			}
for: 循环只有for 
	for{
			//死循环
	}

函数func:
		func Name(参数列表) (返回列表) {
			//函数体
		}

	任何变量，　函数首字母大写对外可见，　小写对外隐藏

不定参数:

	1。　同类型的个数不定的不定参数
		func Mfunc(args ...int) {
			//函数体
			for k, v := range(args) {
				fmt.Println(k, v)
			}
		}
		...int 只能放在最后，表示一个int 类型的切片, 本质是一个[]int 切片
		可以用range 遍历
		
		上面函数完全等于
		func Mfunc(args []int) {
			for k, v := range(args) {
				fmt.Println(k, v)
			}
		}
		但调用的方式是不同的
		Mfunc(1, 2, 3, 4)
		Mfunc([]int{1, 2, 3, 4}) //相对负载，要自己构造切片

有意思的调用方式: 在变参函数体里, 用行参条用变参函数, 要用变量名name...表示列表　
		func Myfunc(args ...int) {
			myfunc2(args...) //用形参调用另一个变参函数(在append()里的切片就是这样传的
			myfunc2(args[1:]...)
		}

	2。任意类型的不定参数　
		用interface{} 代替类型 ...int 换成...interface{}

		func Myfunc(args ...interface{}) {
			//函数体
			for k, v := range(args) {
				switch v.(type) { //v.(type)返回的是类型, 不是返回一个字符串"int", 而是int
				case int:
						//do something
				case string:
						//do something
				...
				}
			}
		}
			根据value.(type)来判断每个参数的类型, (type)必须用()括起来


多返回值:


匿名和闭包:
		匿名函数没有名字，可以赋值给变量，也可以直接运行

		赋值给变量
		f := func(x, y int) int {
			return x + y
		}
	 	使用函数变量
			ret = f(1, 2) // ret = 3
		
		直接运行, 只能在函数中定义
		func(ch chan int) {
			ch <- ACK
		} (reply_chan) //花括号后直接跟参数列表可以直接运行函数
		
		区别:
			f := func(x, y int) int {
				//函数体
			} 此时f是一个函数变量(函数的入口地址)

			f := func(x, y int) int {
				//函数体
		 	}(1, 2) 此时f 是一个int型的变量
			

闭包: 将函数和变量绑定, 而变量又是对外不可见的，类似一个class {private: int i; pulice func ()}

	典型例子, a函数有两个成员, int变量i， 内层匿名函数func,
	内层匿名函数func使用a函数的i变量,
	a函数对外返回内层匿名函数
	此时虽然a返回了，但由于内层匿名函数还在用i, i是不被释放的
	 b = func a() {
		var i int //自由变量
		return func() {
			//body
			fmt.Println(i)
		}
	} () //让b = 内层函数, 而不是外层函数
	 *************函数a的函数体块组成里闭包
	
	b 
	只要b还存在，则闭包就存在，i  变量就还存在


错误处理: // TODO

	error接口
		type error interface {
			Error() string		
		}

一般形式:
	func Foo(param int) (n int, err error) {
		//body	
	}
	n, err = Foo(0)
	if err != nil {
		//handle error
	} else {
		//do something
	}

创建返回的错误信息类(type xx struct 可以看作是在创建一个类)
	type PathError struct {
		Op string
		Path string
		Err error //需要包含的成员, 需要调用Err.Error()
	}
为该类添加方法:
	func (e *PathError) Error() string {
		return e.Op + " " + e.Path + " " + e.Err.Error()
	}

defer: 钩子函数， 先进后出
	
	srcFile, err := os.open(src)
	if err != nil {
		return
	} else {
		defer srcFile.Close()
	}
defer 支持匿名函数
	defer func() {
		//body
	}

panic() 和 recover() //TODO


go test 的测试中， 不支持fmt打印， 只能用t.Errorf() 打印





================================================================================================
第3章 面向对象, 函数不能单独存在, 需要寄存在对象中
================================================================================================


1. 为类型添加方法

type Integer int  //同typedef 一样, 此时，Integer 和 int 是一样的
为Integer 添加方法
func (a Integer) Less(b Integer) bool {
	return a < b
} 此时， Integer 和 int 是不一样的，Integer 成了带有方法的类型

var a Integer

a.Less(2) //面向对象的函数调用方法, 函数寄存在a里
less(a, 2) //面向过程的调用方法, 函数单独存在

func (a Integer) Less(b Integer) bool {} //面向对象的函数声明方法, 函数寄存在a里
func Less(a Integer, b Integer) bool {} //面向过程的函数声明方法, 函数单独存在


(a Integer) 是普通变量, a+=2在函数返回后并不能改变 a的值
(a *Integer) 是指针变量, *a+=2在函数返回后可以改变 *a的值

数组是纯粹值语义, 无论是在函数传参还是普通赋值中，均会产生一份拷贝传递过去

4个引用语义
	slice
	map
	chan
	interface
这4个传递的是指针，指针所指的区域是可更改的
	slice 的本质是
	type slice struct {
		first *T
		len int
		cap int
	}

利用struct 定义新类型 
type Rect struct {
	x, y float64
	width, heigh float64
}

添加方法
func (r *Rect) Area() float64 {
	return r.width * r.height
}

初始化: //不一定非返返回指针类型
	rect1 := new(Rect) //new用于返回该类型的指针
	rect2 := &Rect{} //为指定的为0
	rect3 := &Rect{0, 0, 100, 200} //按顺序赋值
	rect4 := &Rect{with: 100, height: 200)//不按顺序赋值，未指定的为0, 冒号等于与c语言里的.＝一样

	rect5 := Rect{0, 0, 100, 200}

go 在创建指针对象的时候一般会用 (go 自己提供的类似构造函数)
	func NewRect(x, y, width, height float64) *Rect {
		return &Rect{x, y, width, height}
	}


/*****************************************************************************************



匿名组合(类似类的继承)
type Base struct {
	name string
}

type C truct {
	Base //继承该类, Base里有的, C里都会继承过来 
	addr string
}

type D struct {
	*Base //也可以是一个类的指针 
	tel string
}

假如Base 实现了 A, B 方法
C调用他们可以有两种形式: C.A() 或者   C.Base.A()

成员冲突时， 会访问最外层的变量
********************************************************************************************/

今天状态不好，没看懂#############################################################

接口

	一个类只要实现了接口要求的所有函数，则这个类就实现了这个接口

例如有一个接口 
	type IFile interface {
		Read(buf []byte) (n int, err errror)
		Write(buf []byte) (n int, err error)
		Seek(off int64, whence int) (pos int64, err error)
		Close() error	
	}

有一个类
	type File struct {
		//body	
	}
该类实现了IFile接口的所有函数
	func (file *File) Read(buf []byte) (n int, err error) {
		//body
	}

	func (file *File) Write(buf []byte) (n int, err error) {
		//body
	}
	func (file *File) Seek(off int64, whence int) (pos int64, err error) {
		//body
	}
	func (file *File) Close() error {
		//body
	}
则File类实现了IFile接口


接口赋值
	1.对象赋值给接口要用指针, 前提是对象实现了接口
		var a Integer = 1
		var b Interface1 = &a

	2. 将接口a赋值给接口b， 前提是两个接口所包含的函数相同(顺序可以不同), 或者大的赋值给小个
		b 是 a 的子集

接口查询, 可以查询函数名，也可以查询函数类型









===================================================================================================================

并发编程

轻量级线程gorouine，并发协程, 用go调用函数
	
func Add(x, y int) {
	r := x + y
	fmt.Println(r)
}

go Add(1, 1) , Add()会与主程序并发的执行, 如果有返回值，会被丢弃

并发通信 写->5, 4, 3, 2, 1->读
	channel: 一个channel 只能是一种类型，类似类型安全的管道	
	类型为 chan type
	var ch chan int // ch是一个int类型的chan
	
	创建chan  make(chan type) //不带缓冲的chan, 容量为1
	
	写入chan   ch <- value
		写入chan(写满时)会导致所在(goroutine)程序阻塞， 直到chan中的东西被读出而不满时
	
	读chan 	   value := <- ch // <-ch 会忽略读到的东西, 判断是否可读时可用
		如果chan是空的，读操作会是所在(goroutine)程序阻塞直到chan中被写入数据而有东西可读

select:同switch 类似但case条件必须是面向chan的io操作
	
	 select {
	 	case <-chan: //可读时
		case chan <- value: //可写时
		defaule:

	} //当既可读，又可写时, select 只执行一次，case优先级从上到下
	select 也可以监控多个chan

	select {
		case chan <-0:
		case chan <-1:
	} //表明 只写时多个case 之间没有顺序

带缓冲的chan, 实现消息队列(先入先出)
	c := make(chan int, 1024), 好处缓冲区写满之前的写操作不会阻塞 
	可以读取一次数据 <-c
	也可以循环读写数据 for i := range c



超时机制, 利用select 添加超时检查chan

	timeout := make(chan bool, 1) //超时检查chan

	go func() {
		time.sleep(1e9)
		timeout <- true //当timeout可读时，就是超时了
	}() // 类似计时器

	select {
		case <-ch://工作chan
			//do something
		case <-timeout://超时检查chan, 避免ch长时间阻塞
			//ch超时了
	}
	

chan的传递

单向chan， 限制函数只能从该chan里读或者写, 是对正常chan的限制

	var ch1 chan int     //正常的chan
	var ch2 chan<- int   //只写的chan
	var ch3 <-chan int   //只读的chan

	也可以基于正常chan通过强转获得单向chan

	ch4 := make(chan int) //正常chan
	ch5 := <-chan int(ch4) //强转成只读的chan
	ch6 := chan<- int(ch4) //强转成只写的chan

3种类型类型 
	chan int  双向chan
	chan<- int 只写chan
	<-chan int 只读chan

关闭chan
	close(ch)
	x, ok := <-ch 判断ch是否已经关闭



 出让时间片
	runtime.Goshed()

 同步sync包
	
	sync.Mutex锁和sync.RWMutex锁 (sync.Mutex, sync.RWMutex 是2个类型)
	
	sync.Mutex 实现了Lock()和Unlock()方法
	sync.RWMutex 实现了RLock(), Lock() 和Unlock() RUnlock()

全局唯一操作 sync.Once类型的Do()方法
	
	var once sync.once
	func setup() {
		a = "hello, world"
	}
	func doprint() {
		once.Do(setup)
		print(a)
	}	



=========================================================================================
网络编程
=====================================================================================
net 包

建立连接
	net.Dial(net, addr strint) (Conn, error) //拨号函数 
	net 是协议名字, tcp, udp, ip等
	addr是域名或者ip:port

	conn, err := net.Dial("tcp", "172.16.0.89:2010")
	conn 有Write(切片) 和 Read(切片) 方法




















